//factorial: Given n of 1 or more, return the factorial of n, which is n * (n-1) * (n-2) ... 1. Compute the result recursively (without loops).
func factorial(n: Int) -> Int {
    if n == 1 {
        return 1
    }
    return (n * factorial(n: (n-1)))
}

//factorial(n: 1) //1
//factorial(n: 2) //2
//factorial(n: 3) //6

//bunnyEars: We have a number of bunnies and each bunny has two big floppy ears. We want to compute the total number of ears across all the bunnies recursively (without loops or multiplication).
func bunnyEars(bunnies: Int) -> Int {
    
    if bunnies == 0 {
        return 0
    }
    
    return (2 + bunnyEars(bunnies: bunnies - 1))
}

//bunnyEars(bunnies: 0) //0
//bunnyEars(bunnies: 1) //2
//bunnyEars(bunnies: 2) //4

//fibanacci: The fibonacci sequence is a famous bit of mathematics, and it happens to have a recursive definition. The first two values in the sequence are 0 and 1 (essentially 2 base cases). Each subsequent value is the sum of the previous two values, so the whole sequence is: 0, 1, 1, 2, 3, 5, 8, 13, 21 and so on. Define a recursive fibonacci(n) method that returns the nth fibonacci number, with n=0 representing the start of the sequence.
func fibanacci(n: Int) -> Int {
    if n == 0 {
        return 0
    } else if n == 1 {
        return 1
    }
    
    return (fibanacci(n: n-1) + fibanacci(n: n-2))
}

//fibanacci(n: 0) //0
//fibanacci(n: 1) //1
//fibanacci(n: 2) //1

//bunnyEars2: We have bunnies standing in a line, numbered 1, 2, ... The odd bunnies (1, 3, ..) have the normal 2 ears. The even bunnies (2, 4, ..) we'll say have 3 ears, because they each have a raised foot. Recursively return the number of "ears" in the bunny line 1, 2, ... n (without loops or multiplication).
func bunnyEars2(bunnies: Int) -> Int {
    if bunnies == 0 {
        return 0
    }
    
    if bunnies % 2 == 0 {
        return (3 + bunnyEars2(bunnies: bunnies - 1))
    } else {
        return (2 + bunnyEars2(bunnies: bunnies - 1))
    }
}

//bunnyEars2(bunnies: 0) //0
//bunnyEars2(bunnies: 1) //2
//bunnyEars2(bunnies: 2) //5

//triangle: We have triangle made of blocks. The topmost row has 1 block, the next row down has 2 blocks, the next row has 3 blocks, and so on. Compute recursively (no loops or multiplication) the total number of blocks in such a triangle with the given number of rows.
func triangle(rows: Int) -> Int {
    if rows == 0 {
        return 0
    }
    
    return (rows + triangle(rows: rows - 1))
}

//triangle(rows: 0) //0
//triangle(rows: 1) //1
//triangle(rows: 2) //3

//sumDigits:Given a non-negative int n, return the sum of its digits recursively (no loops). Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12).
func sumDigits(n: Int) -> Int {
    
    if n == 0 {
        return 0
    }
    
    return (n % 10 + sumDigits(n: n / 10))
}

//sumDigits(n: 126) //9
//sumDigits(n: 49) //13
//sumDigits(n: 12) //3

//count7: Given a non-negative int n, return the count of the occurrences of 7 as a digit, so for example 717 yields 2. (no loops).
func count7(n: Int) -> Int {    
    if n == 0 {
        return 0
    }
    
    if n % 10 == 7 {
        return (1 + count7(n: n / 10))
    } else {
        return count7(n: n / 10)
    }
}

//count7(n: 717) //2
//count7(n: 7) //1
//count7(n: 123) //0

//count8:Given a non-negative int n, compute recursively (no loops) the count of the occurrences of 8 as a digit, except that an 8 with another 8 immediately to its left counts double, so 8818 yields 4.
func count8(n: Int) -> Int {
    if n == 0 {
        return 0
    }
    
    if n % 10 == 8 && (n / 10) % 10 == 8 {
        return (2 + count8(n: n / 10))
    } else if n % 10 == 8{
        return (1 + count8(n: n / 10))
    } else {
        return count8(n: n / 10)
    }
}

//count8(n: 8) //1
//count8(n: 818) //2
//count8(n: 8818) //4

//powerN: Given base and n that are both 1 or more, compute recursively (no loops) the value of base to the n power, so powerN(3, 2) is 9 (3 squared).
func powerN(base: Int, n: Int) -> Int {
    if n == 0 {
        return 1
    }
    
    return (base * powerN(base: base, n: n-1))
}

//powerN(base: 3, n: 1) //3
//powerN(base: 3, n: 2) //9
//powerN(base: 3, n: 3) //27

//countX: Given a string, compute recursively (no loops) the number of lowercase 'x' chars in the string.
func countx(str: String) -> Int {
    var strTemp = str
    
    if str.characters.count == 0 {
        return 0
    }
    
    if str[str.startIndex] == "x" {
        strTemp.remove(at: strTemp.startIndex)
        return (1 + countx(str: strTemp))
    } else {
        strTemp.remove(at: strTemp.startIndex)
        return countx(str: strTemp)
    }
}

//countX(str: "xxhixx") //4
//countX(str: "xhixhix") //3
//countX(str: "hi") //0

//countHi:Given a string, compute recursively (no loops) the number of times lowercase "hi" appears in the string.
func countHiRecursion(str: String) -> Int {
    var strTemp = str
    
    if str.characters.count == 0 {
        return 0
    }
    
    if str[str.startIndex] == "h" && str[str.index(after: str.startIndex)] == "i" {
        strTemp.remove(at: strTemp.startIndex)
        strTemp.remove(at: strTemp.startIndex)
        return (1 + countHiRecursion(str: strTemp))
    } else {
        strTemp.remove(at: strTemp.startIndex)
        return (countHiRecursion(str: strTemp))
    }
}

//countHiRecursion(str: "xxhixx") //1
//countHiRecursion(str: "xhixhix") //2
//countHiRecursion(str: "hi") //1

//changeXY: Given a string, compute recursively (no loops) a new string where all the lowercase 'x' chars have been changed to 'y' chars.
func changeXY(str: String) -> String {
    var strTemp = str
    
    if str.characters.count == 0 {
        return ""
    }
    
    if str[str.startIndex] == "x" {
        strTemp.remove(at: strTemp.startIndex)
        return (String("y") + changeXY(str: strTemp))
    } else {
        strTemp.remove(at: strTemp.startIndex)
        return (String(str[str.startIndex]) + changeXY(str: strTemp))
    }
}

//changeXY(str: "codex") //codey
//changeXY(str: "xxhixx") //yyhiyy
//changeXY(str: "xhixhix") //yhiyhiy

//changePi: Given a string, compute recursively (no loops) a new string where all appearances of "pi" have been replaced by "3.14".
func changePi(str: String) -> String {
    var strTemp = str
    
    if str.characters.count == 0 {
        return ""
    }
    
    if str[str.startIndex] == "p" && str[str.index(after: str.startIndex)] == "i" {
        strTemp.remove(at: strTemp.startIndex)
        strTemp.remove(at: strTemp.startIndex)
        return ("3.14" + changePi(str: strTemp))
    } else {
        strTemp.remove(at: strTemp.startIndex)
        return (String(str[str.startIndex]) + changePi(str: strTemp))
    }
    
}

//changePi(str: "xpix") //x3.14x
//changePi(str: "pipi") //3.143.14
//changePi(str: "pip") //3.14p

//noX: Given a string, compute recursively a new string where all the 'x' chars have been removed.
func noX(str: String) -> String {
    var strTemp = str
    
    if str.characters.count == 0 {
        return ""
    }
    
    if str[str.startIndex] == "x" {
        strTemp.remove(at: strTemp.startIndex)
        return noX(str: strTemp)
    } else {
        strTemp.remove(at: strTemp.startIndex)
        return (String(str[str.startIndex]) + noX(str: strTemp))
    }
}

//noX(str: "xabx") //ab
//noX(str: "abc") //abc
//noX(str: "xx") //

//array6: Given an array of ints, compute recursively if the array contains a 6. We'll use the convention of considering only the part of the array that begins at the given index. In this way, a recursive call can pass index+1 to move down the array. The initial call will pass in index as 0.
func array6(nums: [Int], index: Int) -> Bool {
   var numsTemp = nums
    
    if numsTemp.count == 0 {
        return false
    }
    
    if numsTemp[index] == 6 {
        return true
    } else if index < nums.count-1 {
        return array6(nums: numsTemp, index: index+1)
    } else {
        return false
    }
}

//array6(nums: [1, 6, 4], index: 0) //true
//array6(nums: [1, 4], index: 0) //false
//array6(nums: [6], index: 0) //true

//array11: Given an array of ints, compute recursively the number of times that the value 11 appears in the array. We'll use the convention of considering only the part of the array that begins at the given index. In this way, a recursive call can pass index+1 to move down the array. The initial call will pass in index as 0.
func array11(nums: [Int], index: Int) -> Int {
    var numsTemp = nums
    
    if numsTemp.count == 0 {
        return 0
    }
    
    if index < nums.count && numsTemp[index] == 11 {
        return (1 + array11(nums: numsTemp, index: index+1))
    } else if index < nums.count {
        return array11(nums: numsTemp, index: index+1)
    } else {
        return 0
    }
}

//array11(nums: [1, 2, 11], index: 0) //1
//array11(nums: [11, 11], index: 0) //2
//array11(nums: [1, 2, 3, 4], index: 0) //0

//array220: Given an array of ints, compute recursively if the array contains somewhere a value followed in the array by that value times 10.
func array220(nums: [Int], index: Int) -> Bool {
    if nums.count == 0 {
        return false
    }
    
    if nums.count > 1 && nums[index] * 10 == nums[index+1] {
        return true
    } else if index < nums.count - 2 {
        return array220(nums: nums, index: index+1)
    } else {
        return false
    }
}

//array220(nums: [1, 2, 20], index: 0) //true
//array220(nums: [3, 30], index: 0) //true
//array220(nums: [3], index: 0) //false

//allStar: Given a string, compute recursively a new string where all the adjacent chars are now separated by a "*".
func allStar(str: String) -> String {
    var strTemp = str
    
    if strTemp.characters.count == 0 {
        return ""
    }
    
    
    strTemp.remove(at: strTemp.startIndex)
    
    if strTemp.characters.count >= 1 {
        return (String(str[str.startIndex]) + "*" + allStar(str: strTemp))
    } else {
        return (String(str[str.startIndex]) + allStar(str: strTemp))
    }
}

//allStar(str: "hello") //h*e*l*l*o
//allStar(str: "abc") //a*b*c
//allStar(str: "ab") //a*b

//pairStar: Given a string, compute recursively a new string where identical chars that are adjacent in the original string are separated from each other by a "*".
func pairStar(str: String) -> String {
    var strTemp = str
    
    if strTemp.characters.count == 0 {
        return ""
    }
    
    if strTemp.characters.count > 1 && str[str.startIndex] == str[str.index(after: str.startIndex)] {
        strTemp.remove(at: strTemp.startIndex)
        strTemp.remove(at: strTemp.startIndex)
        return (String(str[str.startIndex]) + "*" + String(str[str.index(after: str.startIndex)]) + pairStar(str: strTemp))
    } else {
        strTemp.remove(at: strTemp.startIndex)
        return (String(str[str.startIndex]) + pairStar(str: strTemp))
    }
}

//pairStar(str: "hello") //hel*lo
//pairStar(str: "xxyy") //x*xy*y
//pairStar(str: "aaaa") //a*aa*a
