//countEvens: Return the number of even ints in the given array. Note: the % "mod" operator computes the remainder, e.g. 5 % 2 is 1.
func countEvens(nums: [Int]) -> Int {
    var count = 0
    
    for x in 0..<nums.count {
        if nums[x] % 2 == 0 {
            count += 1
        }
    }
    
    return count
}

//countEvens(nums: [2, 1, 2, 3, 4]) //3
//countEvens(nums: [2, 2, 0]) //3
//countEvens(nums: [1, 3, 5]) //0

//bigDiff: Given an array length 1 or more of ints, return the difference between the largest and smallest values in the array. Note: the built-in Math.min(v1, v2) and Math.max(v1, v2) methods return the smaller or larger of two values.
func bigDiff(nums: [Int]) -> Int {
    var minNum = nums[0]
    var maxNum = nums[0]
    
    for x in 0..<nums.count {
        minNum = min(nums[x], minNum)
        maxNum = max(nums[x], maxNum)
    }
    
    
    return maxNum - minNum
}

//bigDiff(nums: [10, 3, 5, 6]) //7
//bigDiff(nums: [7, 2, 10, 9]) //8
//bigDiff(nums: [2, 10, 7, 2]) //8

//centeredAverage: Return the "centered" average of an array of ints, which we'll say is the mean average of the values, except ignoring the largest and smallest values in the array. If there are multiple copies of the smallest value, ignore just one copy, and likewise for the largest value. Use int division to produce the final average. You may assume that the array is length 3 or more.
func centeredAverage(nums: [Int]) -> Int {
    var minNum = nums[0]
    var maxNum = nums[0]
    var sum = 0
    
    for x in 0..<nums.count {
        minNum = min(nums[x], minNum)
        maxNum = max(nums[x], maxNum)
        sum += nums[x]
    }
    
    return (sum - minNum - maxNum) / (nums.count-2)
}

//centeredAverage(nums: [1, 2, 3, 4, 100]) //3
//centeredAverage(nums: [1, 1, 5, 5, 10, 8, 7]) //5
//centeredAverage(nums: [-10, -4, -2, -4, -2, 0]) //-3

//sum13: Return the sum of the numbers in the array, returning 0 for an empty array. Except the number 13 is very unlucky, so it does not count and numbers that come immediately after a 13 also do not count.
func sum13(nums: [Int]) -> Int {
    var sum = 0
    
    for x in 0..<nums.count {
        if nums[x] != 13 {
            sum += nums[x]
        }
    }
    
    return sum
}

//print(sum13(nums: [1, 2, 2, 1])) //6
//print(sum13(nums: [1, 1])) //2
//print(sum13(nums: [1, 2, 2, 1, 13])) //6

//sum67: Return the sum of the numbers in the array, except ignore sections of numbers starting with a 6 and extending to the next 7 (every 6 will be followed by at least one 7). Return 0 for no numbers.
func sum67(nums: [Int]) -> Int {
    var sum = 0
    var range = false
    
    for x in 0..<nums.count {
        
        if !range {
            sum += nums[x]
        }
        
        if nums[x] == 6 {
            range = true
            sum -= 6
        } else if nums[x] == 7 {
            range = false
        }
    }
    
    return sum
}

//has22: Given an array of ints, return true if the array contains a 2 next to a 2 somewhere.
func has22(nums: [Int]) -> Bool {
    for x in 0..<nums.count-1 {
        if nums[x] == 2 && nums[x+1] == 2{
            return true
        }
    }
    return false
}

//has22(nums: [1, 2, 2]) //true
//has22(nums: [1, 2, 1, 2]) //false
//has22(nums: [2, 1, 2]) //false

//more14: Given an array of ints, return true if the number of 1's is greater than the number of 4's
func more14(nums: [Int]) -> Bool {
    var oneCount = 0
    var fourCount = 0
    
    for x in 0..<nums.count {
        if nums[x] == 1 {
            oneCount += 1
        } else if nums[x] == 4 {
            fourCount += 1
        }
    }
    
    return oneCount > fourCount
}

//more14(nums: [1, 4, 1]) //true
//more14(nums: [1, 4, 1, 4]) //false
//more14(nums: [1, 1]) //true

//fizzArray:Given a number n, create and return a new int array of length n, containing the numbers 0, 1, 2, ... n-1. The given n may be 0, in which case just return a length 0 array. You do not need a separate if-statement for the length-0 case; the for-loop should naturally execute 0 times in that case, so it just works. The syntax to make a new int array is: new int[desired_length]
func fizzArray(n: Int) -> [Int] {
    var array = [Int]()
    
    for x in 0..<n {
        array.append(x)
    }
    
    return array
}

//fizzArray(n: 4) //[0, 1, 2, 3]
//fizzArray(n: 1) //[0]
//fizzArray(n: 10) //[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

//only14: Given an array of ints, return true if every element is a 1 or a 4.
func only14(nums: [Int]) -> Bool {
    for x in 0..<nums.count {
        if nums[x] != 1 && nums[x] != 4 {
            return false
        }
    }
    return true
}

//only14(nums: [1, 4, 1, 4]) //true
//only14(nums: [1, 4, 2, 4]) //false
//only14(nums: [1, 1]) //true

//fizzArray2: Given a number n, create and return a new string array of length n, containing the strings "0", "1" "2" .. through n-1. N may be 0, in which case just return a length 0 array. Note: String.valueOf(xxx) will make the String form of most types. The syntax to make a new string array is: new String[desired_length]
func fizzArray2(n: Int) -> [String] {
    var array = [String]()
    
    for x in 0..<n {
        array.append(String(x))
    }
    
    return array
}

//fizzArray2(n: 4) //["0", "1", "2", "3"]
//fizzArray2(n: 10) //["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
//fizzArray2(n: 2) //["0", "1"]

//no14: Given an array of ints, return true if it contains no 1's or it contains no 4's.
func no14(nums: [Int]) -> Bool {
    var oneCount = 0
    var fourCount = 0
    
    for num in nums {
        if num == 1 {
            oneCount += 1
        } else if num == 4 {
            fourCount += 1
        }
    }
    return oneCount == 0 || fourCount == 0
}

//no14(nums: [1, 2, 3]) //true
//no14(nums: [1, 2, 3, 4]) //false
//no14(nums: [2, 3, 4]) //true
