// stringTimes: Given a string and a non-negative int n, return a larger string that is n copies of the original string.
func stringTimes(str: String, n: Int) -> String {
    var result = str
    
    for _ in 1..<n {
        result += str
    }
    
    return result
}

//stringTimes(str: "Hi", n: 2) //HiHi
//stringTimes(str: "Hi", n: 3) //HiHiHi
//stringTimes(str: "Hi", n: 1) //Hi

// frontTimes: Given a string and a non-negative int n, we'll say that the front of the string is the first 3 chars, or whatever is there if the string is less than length 3. Return n copies of the front;
func frontTimes(str: String, n: Int) -> String {
    var strFront: String
    var result = ""
    let index1 = str.index(str.startIndex, offsetBy: 3)
    
    if str.characters.count <= 3 {
        strFront = str
    } else {
        strFront = str.substring(to: index1)
    }
    
    for _ in 1...n {
        result += strFront
    }
    
    return result
}

//frontTimes(str: "Chocolate", n: 2) //ChoCho
//frontTimes(str: "Chocolate", n: 3) //ChoChoCho
//frontTimes(str: "Abc", n: 2) //AbcAbcAbc

//countXX: Count the number of "xx" in the given string. We'll say that overlapping is allowed, so "xxx" contains 2 "xx".
func countXX(str: String) -> Int {
    var count = 0;
    var startIndex = str.index(str.startIndex, offsetBy: 0)
    var endIndex = str.index(str.startIndex, offsetBy: 2)
    var range = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))
    
    for index in 0..<str.characters.count-1 {
        startIndex = str.index(str.startIndex, offsetBy: index)
        endIndex = str.index(str.startIndex, offsetBy: index+2)
        range = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))
        if str.substring(with: range) == "xx" {
            count += 1
        }
        

    }
    
    return count
}

//countXX(str: "abcxx") //2
//countXX(str: "xxx") //2
//countXX(str: "xxxx") //3

//doubleX: Given a string, return true if the first instance of "x" in the string is immediately followed by another "x".
func doubleX(str: String) -> Bool {
    var strIndex = str.index(str.startIndex, offsetBy: 1)
    var strIndex2 = str.index(str.startIndex, offsetBy: 1)
    
    for index in 0..<str.characters.count-1 {
        strIndex = str.index(str.startIndex, offsetBy: index)
        strIndex2 = str.index(str.startIndex, offsetBy: index+1)
        if str[strIndex] == "x" && str[strIndex] == str[strIndex2] {
            return true
        }
    }
    
    return false
}

//doubleX(str: "axxbb") //true
//doubleX(str: "axaxax") //false
//doubleX(str: "xxxxx") //true

//stringBits: Given a string, return a new string made of every other char starting with the first, so "Hello" yields "Hlo".
func stringBits(str: String) -> String {
    var result = ""
    var strIndex = str.index(str.startIndex, offsetBy: 1)
    
    for index in 0..<str.characters.count {
        strIndex = str.index(str.startIndex, offsetBy: index)
        if index % 2 == 0 {
            result += String(str[strIndex])
        }
    }
    
    return result
}

//stringBits(str: "Hello") //Hlo
//stringBits(str: "Hi") //H
//stringBits(str: "Heeololeo") //Hello

//stringSplosion: Given a non-empty string like "Code" return a string like "CCoCodCode".
func stringSplosion(str: String) -> String {
    var result = ""
    let startIndex = str.index(str.startIndex, offsetBy: 0)
    var endIndex = str.index(str.startIndex, offsetBy: 1)
    var range = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))

    for index in 1...str.characters.count {
        endIndex = str.index(str.startIndex, offsetBy: index)
        range = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))
        result += str.substring(with: range)
    }
    
    return result
}

//stringSplosion(str: "Code") //CCoCodCode
//stringSplosion(str: "abc") //aababc
//stringSplosion(str: "Code") //aab

//last2: Given a string, return the count of the number of times that a substring length 2 appears in the string and also as the last 2 chars of the string, so "hixxxhi" yields 1 (we won't count the end substring).
func last2(str: String) -> Int {
    var count = 0;
    var startIndex = str.index(str.startIndex, offsetBy: 0)
    var endIndex = str.index(str.startIndex, offsetBy: 1)
    var range = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))
    
    let startIndexLast2 = str.index(str.startIndex, offsetBy: str.characters.count-2)
    let endIndexLast2 = str.index(str.startIndex, offsetBy: str.characters.count)
    let rangeLast2 = Range(uncheckedBounds: (lower: startIndexLast2, upper: endIndexLast2))
    let last2 = str.substring(with: rangeLast2)
    
    for index in 0..<str.characters.count-3 {
        startIndex = str.index(str.startIndex, offsetBy: index)
        endIndex = str.index(str.startIndex, offsetBy: index+2)
        range = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))
                
        if str.substring(with: range) == last2 {
            count += 1
        }
    }
    
    
    return count
}

//last2(str: "hixxhi") //1
//last2(str: "xaxxaxaxx") //1
//last2(str: "axxxaaxx") //2

//count9: Given an array of ints, return the number of 9's in the array.
func count9(nums: [Int]) -> Int {
    var count = 0;
    
    for index in 0..<nums.count {
        if nums[index] == 9 {
            count += 1
            
        }
    }
    
    return count
}

//count9(nums: [1, 2, 9) //1
//count9(nums: [1, 9, 9]) //2
//count9(nums: [1, 9, 9, 3, 9]) //3

//arrayFront9: Given an array of ints, return true if one of the first 4 elements in the array is a 9. The array length may be less than 4.
func arrayFront9(nums: [Int]) -> Bool {
    for index in 0..<nums.count {
        if index <= 3 && nums[index] == 9 {
            return true
        }
    }
    
    return false
}

//arrayFront9(nums: [1, 2, 9, 3, 4]) //true
//arrayFront9(nums: [1, 2, 3, 4, 9]) //false
//arrayFront9(nums: [1, 2, 3, 4, 5]) //false

//array123: Given an array of ints, return true if the sequence of numbers 1, 2, 3 appears in the array somewhere.
func array123(nums: [Int]) -> Bool {
    for index in 0..<nums.count - 2 {
        if nums[index] == 1 && nums[index+1] == 2 && nums[index+2] == 3 {
            return true
        }
    }
    
    return false
}

//array123(nums: [1, 1, 2, 3, 1]) //true
//array123(nums: [1, 1, 2, 4, 1]) //false
//array123(nums: [1, 1, 2, 1, 2, 3]) //true

//stringMatch: Given 2 strings, a and b, return the number of the positions where they contain the same length 2 substring. So "xxcaazz" and "xxbaaz" yields 3, since the "xx", "aa", and "az" substrings appear in the same place in both strings.
func stringMatch(a: String, b: String) -> Int {
    var count = 0
    
    var startIndexa = a.index(a.startIndex, offsetBy: 0)
    var endIndexa = a.index(a.startIndex, offsetBy: 1)
    var rangea = Range(uncheckedBounds: (lower: startIndexa, upper: endIndexa))
    
    var startIndexb = b.index(b.startIndex, offsetBy: 0)
    var endIndexb = b.index(b.startIndex, offsetBy: 1)
    var rangeb = Range(uncheckedBounds: (lower: startIndexb, upper: endIndexb))
    
    let len = min(a.characters.count, b.characters.count)
    
    for index in 0..<len-1 {
        startIndexa = a.index(a.startIndex, offsetBy: index)
        endIndexa = a.index(a.startIndex, offsetBy: index+2)
        rangea = Range(uncheckedBounds: (lower: startIndexa, upper: endIndexa))
        
        startIndexb = b.index(b.startIndex, offsetBy: index)
        endIndexb = b.index(b.startIndex, offsetBy: index+2)
        rangeb = Range(uncheckedBounds: (lower: startIndexb, upper: endIndexb))
        
        if a.substring(with: rangea) == b.substring(with: rangeb) {
            count += 1
        }
    }
    
    return count
}

//stringX: Given a string, return a version where all the "x" have been removed. Except an "x" at the very start or end should not be removed.
func stringX(str: String) -> String {
    var result = ""
    var index = str.index(str.startIndex, offsetBy: 0)
    
    for x in 0..<str.characters.count {
        index = str.index(str.startIndex, offsetBy: x)
        if str[index] != "x" || x == 0 || x == str.characters.count-1 {
            result.append(str[index])
        }
    }
    
    return result
}

//stringX(str: "xxHxix") //xHix
//stringX(str: "abxxxcd") //abcd
//stringX(str: "xabxxxcdx") //xabcdx

//altPairs: Given a string, return a string made of the chars at indexes 0,1, 4,5, 8,9 ... so "kittens" yields "kien".
func altPairs(str: String) -> String {
    var result = ""
    var index = str.index(str.startIndex, offsetBy: 0)
    var x = 0
    
    while x < str.characters.count {
        index = str.index(str.startIndex, offsetBy: x)
        result.append(str[index])
        if x % 2 == 1 {
            x += 2
        }
        x += 1
    }
    
    return result
}

//altPairs(str: "kitten") //kien
//altPairs(str: "Chocolate") //Chole
//altPairs(str: "CodingHorror") //Congrr

//stringYak: Suppose the string "yak" is unlucky. Given a string, return a version where all the "yak" are removed, but the "a" can be any char. The "yak" strings will not overlap.
func stringYak(str: String) -> String {
    var result = ""
    var index = str.index(str.startIndex, offsetBy: 0)
    var index2 = str.index(str.startIndex, offsetBy: 0)
    var x = 0
    
    while x < str.characters.count-2 {
        index = str.index(str.startIndex, offsetBy: x)
        index2 = str.index(str.startIndex, offsetBy: x+2)
        if str[index] == "y" && str[index2] == "k" {
            x += 2
        } else {
            result.append(str[index])
        }
        x += 1
    }
    return result
}

//stringYak(str: "yakpak") //pak
//stringYak(str: "pakyak") //pak
//stringYak(str: "yak123ya") //123ya

//array667: Given an array of ints, return the number of times that two 6's are next to each other in the array. Also count instances where the second "6" is actually a 7.
func array667(nums: [Int]) -> Int {
    var count = 0
    
    for x in 0..<nums.count-1 {
        if nums[x] == 6 && (nums[x+1] == 6 || nums[x+1] == 7) {
            count += 1
        }
    }
    
    return count
}

//array667(nums: [6, 6, 2]) //1
//array667(nums: [6, 6, 2, 6]) //1
//array667(nums: [6, 7, 2, 6]) //1
