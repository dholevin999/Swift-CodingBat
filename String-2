//doubleChar: Given a string, return a string where for every char in the original, there are two chars.
func doubleChar(str: String) -> String {
    var index = str.index(str.startIndex, offsetBy: 0)
    var result = ""
    
    for x in 0..<str.characters.count {
        index = str.index(str.startIndex, offsetBy: x)
        result += "\(str[index])"
        result += "\(str[index])"
    }
    
    return result
}

//doubleChar(str: "The") //TThhee
//doubleChar(str: "AAbb") //AAAAbbbb
//doubleChar(str: "Hi-There") //HHii--TThheerree

//countHi: Return the number of times that the string "hi" appears anywhere in the given string.
func countHi(str: String) -> Int {
    var count = 0
    var startIndex = str.index(str.startIndex, offsetBy: 0)
    var endIndex = str.index(str.startIndex, offsetBy: 1)
    var range = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))

    for x in 0..<str.characters.count-1 {
        startIndex = str.index(str.startIndex, offsetBy: x)
        endIndex = str.index(str.startIndex, offsetBy: x+2)
        range = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))
        
        if str.substring(with: range) == "hi" {
            count += 1
        }
    }
    
    return count
}

//countHi(str: "abc hi ho") //1
//countHi(str: "ABChi hi") //2
//countHi(str: "hihi") //2

//catDog: Return true if the string "cat" and "dog" appear the same number of times in the given string.
func catDog(str: String) -> Bool {
    var catCount = 0
    var dogCount = 0
    var startIndex = str.index(str.startIndex, offsetBy: 0)
    var endIndex = str.index(str.startIndex, offsetBy: 1)
    var range = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))
    
    for index in 0..<str.characters.count-2 {
        startIndex = str.index(str.startIndex, offsetBy: index)
        endIndex = str.index(str.startIndex, offsetBy: index+3)
        range = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))
                
        if str.substring(with: range) == "cat" {
            catCount += 1
        } else if str.substring(with: range) == "dog" {
            dogCount += 1
        }
    }
    
    
    return catCount == dogCount
}

//catDog(str: "catdog") //true
//catDog(str: "catcat") //false
//catDog(str: "1cat1cadodog") //true

//countCode: Return the number of times that the string "code" appears anywhere in the given string, except we'll accept any letter for the 'd', so "cope" and "cooe" count.
func countCode(str: String) -> Int {
    var count = 0
    var startIndex = str.index(str.startIndex, offsetBy: 0)
    var endIndex = str.index(str.startIndex, offsetBy: 1)
    var range = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))
    
    var eIndexStart = str.index(str.startIndex, offsetBy: 0)
    var eIndexEnd = str.index(str.startIndex, offsetBy: 1)
    var eRange = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))
    
    for index in 0..<str.characters.count-3 {
        startIndex = str.index(str.startIndex, offsetBy: index)
        endIndex = str.index(str.startIndex, offsetBy: index+2)
        range = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))
        
        eIndexStart = str.index(str.startIndex, offsetBy: index+3)
        eIndexEnd = str.index(str.startIndex, offsetBy: index+4)
        eRange = Range(uncheckedBounds: (lower: eIndexStart, upper: eIndexEnd))
        
        if str.substring(with: range) == "co" && str.substring(with: eRange) == "e" {
            count += 1
        }
    }
    
    return count
}

//countCode(str: "aaacodebbb") //1
//countCode(str: "codexxcode") //2
//countCode(str: "cozexxcope") //2

//endOther: Given two strings, return true if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be "case sensitive"). Note: str.toLowerCase() returns the lowercase version of a string.
func endOther(a: String, b: String) -> Bool {
    let aLower = a.lowercased()
    let bLower = b.lowercased()
    var startIndex = a.index(a.startIndex, offsetBy: 0)
    
    if a.characters.count < b.characters.count {
        startIndex = a.index(a.startIndex, offsetBy: a.characters.count)
        if aLower == bLower.substring(from: startIndex) {
            return true
        }
    } else {
        startIndex = b.index(b.startIndex, offsetBy: b.characters.count-1)
        if bLower == aLower.substring(from: startIndex) {
            return true
        }
    }
    
    return false
}

//endOther(a: "Hiabc", b: "abc") //true
//endOther(a: "AbC", b: "HiaBc") //true
//endOther(a: "abc", b: "abXabc") //true

//xyzThere: Return true if the given string contains an appearance of "xyz" where the xyz is not directly preceeded by a period (.). So "xxyz" counts but "x.xyz" does not.
func xyzThere(str: String) -> Bool {
    var startIndex = str.index(str.startIndex, offsetBy: 0)
    var endIndex = str.index(str.startIndex, offsetBy: 1)
    var range = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))
    
    var periodIndexStart = str.index(str.startIndex, offsetBy: 0)
    var periodIndexEnd = str.index(str.startIndex, offsetBy: 1)
    var periodRange = Range(uncheckedBounds: (lower: periodIndexEnd, upper: periodIndexEnd))
    
    for index in 0..<str.characters.count-3 {
        startIndex = str.index(str.startIndex, offsetBy: index+1)
        endIndex = str.index(str.startIndex, offsetBy: index+4)
        range = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))
        
        periodIndexStart = str.index(str.startIndex, offsetBy: index)
        periodIndexEnd = str.index(str.startIndex, offsetBy: index+1)
        periodRange = Range(uncheckedBounds: (lower: periodIndexStart, upper: periodIndexEnd))
        
        if str.substring(with: range) == "xyz" && str.substring(with: periodRange) == "." {
            return false
        }
    }
    return true
}

//xyzThere(str: "abcxyz") //true
//xyzThere(str: "abc.xyz") //false
//xyzThere(str: "xyz.abc") //true

//bobThere: Return true if the given string contains a "bob" string, but where the middle 'o' char can be any char.
func bobThere(str: String) -> Bool {
    var startIndex = str.index(str.startIndex, offsetBy: 0)
    var endIndex = str.index(str.startIndex, offsetBy: 1)
    var range = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))
    
    var indexStart2 = str.index(str.startIndex, offsetBy: 0)
    var indexEnd2 = str.index(str.startIndex, offsetBy: 1)
    var range2 = Range(uncheckedBounds: (lower: indexStart2, upper: indexEnd2))
    
    for index in 0..<str.characters.count-2 {
        startIndex = str.index(str.startIndex, offsetBy: index)
        endIndex = str.index(str.startIndex, offsetBy: index+1)
        range = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))
        
        indexStart2 = str.index(str.startIndex, offsetBy: index+2)
        indexEnd2 = str.index(str.startIndex, offsetBy: index+3)
        range2 = Range(uncheckedBounds: (lower: indexStart2, upper: indexEnd2))
        
        if str.substring(with: range) == "b" && str.substring(with: range2) == "b" {
            return true
        }
    }
    
    return false
}

//bobThere(str: "abcbob") //true
//bobThere(str: "b9b") //true
//bobThere(str: "bac") //false

//xyBalance: We'll say that a String is xy-balanced if for all the 'x' chars in the string, there exists a 'y' char somewhere later in the string. So "xxy" is balanced, but "xyx" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.
func xyBalance(str: String) -> Bool {
    var startIndex = str.index(str.startIndex, offsetBy: 0)
    var endIndex = str.index(str.startIndex, offsetBy: 1)
    var range = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))
    
    var indexStart2 = str.index(str.startIndex, offsetBy: 0)
    var indexEnd2 = str.index(str.startIndex, offsetBy: 1)
    var range2 = Range(uncheckedBounds: (lower: indexStart2, upper: indexEnd2))
    
    for index in 0..<str.characters.count-2 {
        startIndex = str.index(str.startIndex, offsetBy: index)
        endIndex = str.index(str.startIndex, offsetBy: index+1)
        range = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))
        
        if str.substring(with: range) == "x" {
            indexStart2 = str.index(str.startIndex, offsetBy: index)
            indexEnd2 = str.index(str.startIndex, offsetBy: str.characters.count)
            range2 = Range(uncheckedBounds: (lower: indexStart2, upper: indexEnd2))
            if str.substring(with: range2).range(of: "y") == nil {
                return false
            }
        }
    }
    
    
    return true
}

//xyBalance(str: "aaxbby") //true
//xyBalance(str: "aaxbb") //false
//xyBalance(str: "yaaxbb") //false

//mixString: Given two strings, a and b, create a bigger string made of the first char of a, the first char of b, the second char of a, the second char of b, and so on. Any leftover chars go at the end of the result.
func mixString(a: String, b: String) -> String {
    var result = ""
    var aIndex = 0
    var bIndex = 0
    var index = 0
    
    var indexB = b.index(b.startIndex, offsetBy: 0)
    var indexA = a.index(a.startIndex, offsetBy: 0)
    
    while aIndex < a.characters.count || bIndex < b.characters.count {
        
        if index % 2 == 0 && aIndex < a.characters.count {
            indexA = a.index(a.startIndex, offsetBy: aIndex)
            result += String(a[indexA])
            aIndex += 1
        } else if bIndex < b.characters.count {
            indexB = b.index(b.startIndex, offsetBy: bIndex)
            result += String(b[indexB])
            bIndex += 1
        }
        index += 1
    }
    
    return result
}

//mixString(a: "abc", b: "xyz") //axbycz
//mixString(a: "Hi", b: "There") //HTihere
//mixString(a: "xxxx", b: "There") //xTxhxexre

//repeatEnd: Given a string and an int n, return a string made of n repetitions of the last n characters of the string. You may assume that n is between 0 and the length of the string, inclusive.
func repeatEnd(str: String, n: Int) -> String {
    var result = ""
    
    let startIndex = str.index(str.startIndex, offsetBy: str.characters.count - n)
    let endIndex = str.index(str.startIndex, offsetBy: str.characters.count)
    let range = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))
    
    for _ in 0..<n {
        result += str.substring(with: range)
    }
    
    return result
}

//repeatEnd(str: "Hello", n: 3) //llollollo
//repeatEnd(str: "Hello", n: 2) //lolo
//repeatEnd(str: "Hello", n: 1) //o

//repeatFront: Given a string and an int n, return a string made of the first n characters of the string, followed by the first n-1 characters of the string, and so on. You may assume that n is between 0 and the length of the string, inclusive (i.e. n >= 0 and n <= str.length()).
func repeatFront(str: String, n: Int) -> String {
    var result = ""
    
    var startIndex = str.index(str.startIndex, offsetBy: 0)
    var endIndex = str.index(str.startIndex, offsetBy: n)
    var range = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))
    
    for index in 0..<n {
        startIndex = str.index(str.startIndex, offsetBy: 0)
        endIndex = str.index(str.startIndex, offsetBy: n-index)
        range = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))
        
        result += str.substring(with: range)
    }
    
    return result
}

//repeatFront(str: "Chocolate", n: 4) //ChocChoChC
//repeatFront(str: "Chocolate", n: 3) //ChoChC
//repeatFront(str: "Ice Cream", n: 2) //IcI

//repeatSeparator: Given two strings, word and a separator sep, return a big string made of count occurrences of the word, separated by the separator string.
func repeatSeparator(word: String, sep: String, count: Int) -> String {
    var result = ""
    
    for index in 0..<count {
        result += word
        
        if index < count - 1 {
            result += sep
        }
    }
    
    return result
}

//repeatSeparator(word: "Word", sep: "X", count: 3) //WordXWordXWord
//repeatSeparator(word: "This", sep: "And", count: 2) //ThisAndThis
//repeatSeparator(word: "This", sep: "And", count: 1) //This

//prefixAgain: Given a string, consider the prefix string made of the first N chars of the string. Does that prefix string appear somewhere else in the string? Assume that the string is not empty and that N is in the range 1..str.length().
func prefixAgain(str: String, n: Int) -> Bool {
    
    let startIndex = str.index(str.startIndex, offsetBy: 0)
    let endIndex = str.index(str.startIndex, offsetBy: n)
    let range = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))
    
    var startIndex2 = str.index(str.startIndex, offsetBy: 0)
    var endIndex2 = str.index(str.startIndex, offsetBy: n)
    var range2 = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))
    
    
    for index in n..<str.characters.count - n {
        startIndex2 = str.index(str.startIndex, offsetBy: index)
        endIndex2 = str.index(str.startIndex, offsetBy: index + n)
        range2 = Range(uncheckedBounds: (lower: startIndex2, upper: endIndex2))
        
        if str.substring(with: range) == str.substring(with: range2) {
            return true
        }
    }
    
    return false
}

//prefixAgain(str: "abXYabc", n: 1) //true
//prefixAgain(str: "abXYabc", n: 2) //true
//prefixAgain(str: "abXYabc", n: 3) //false

//xyzMiddle: Given a string, does "xyz" appear in the middle of the string? To define middle, we'll say that the number of chars to the left and right of the "xyz" must differ by at most one.
func xyzMiddle(str: String) -> Bool {
    
    var startIndex = str.index(str.startIndex, offsetBy: 0)
    var endIndex = str.index(str.startIndex, offsetBy: 3)
    var range = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))
    
    for index in 0..<str.characters.count-2 {
        startIndex = str.index(str.startIndex, offsetBy: index)
        endIndex = str.index(str.startIndex, offsetBy: index + 3)
        range = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))
        
        if str.substring(with: range) == "xyz" && abs(index - (str.characters.count - (index+3))) <= 1 {
            return true
        }
    }
    
    return false
}

//xyzMiddle(str: "AAxyzBB") //true
//xyzMiddle(str: "AxyzBB") //true
//xyzMiddle(str: "AxyzBBB") //false

//getSandwitch: A sandwich is two pieces of bread with something in between. Return the string that is between the first and last appearance of "bread" in the given string, or return the empty string "" if there are not two pieces of bread.
func getSandwitch(str: String) -> String {
    var result = ""
    var bread = false
    var breadCount = 0
    
    var startIndex = str.index(str.startIndex, offsetBy: 0)
    var endIndex = str.index(str.startIndex, offsetBy: 3)
    var range = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))
    
    var index2 = str.index(str.startIndex, offsetBy: 0)
    
    
    for index in 0..<str.characters.count-4 {
        startIndex = str.index(str.startIndex, offsetBy: index)
        endIndex = str.index(str.startIndex, offsetBy: index + 5)
        range = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))
        
        if str.substring(with: range) == "bread" && bread == false {
            bread = true
            breadCount += 1
        } else if str.substring(with: range) == "bread" && bread == true {
            bread = false
            breadCount += 1
        }
        
        if bread == true {
            index2 = str.index(str.startIndex, offsetBy: index+5)
            result += String(str[index2])
        }
    }

    result = result.replacingOccurrences(of: "bread", with: "")
    
    
    return result
}

//getSandwitch(str: "breadjambread") //jam
//getSandwitch(str: "xxbreadjambreadyy") //jam

//sameStarChar: Returns true if for every '*' (star) in the string, if there are chars both immediately before and after the star, they are the same.
func sameStarChar(str: String) -> Bool {
    var indexStar = str.index(str.startIndex, offsetBy: 0)
    var indexStarMinus = str.index(str.startIndex, offsetBy: 0)
    var indexStarPlus = str.index(str.startIndex, offsetBy: 0)

    for index in 0..<str.characters.count {
        indexStar = str.index(str.startIndex, offsetBy: index)
        if index > 0 && index < str.characters.count - 1 {
            indexStarMinus = str.index(str.startIndex, offsetBy: index-1)
            indexStarPlus = str.index(str.startIndex, offsetBy: index+1)
        }
        
        if index > 0 && index < str.characters.count - 1 && str[indexStar] == "*" && str[indexStarMinus] == str[indexStarPlus] {
            return true
        } else if (index == 0 || index == str.characters.count-1) && str[indexStar] == "*" {
            return false
        }
    }
    
    return false
}

//sameStarChar(str: "xy*yzz") //true
//sameStarChar(str: "xy*zzz") //false
//sameStarChar(str: "*xa*az") //true

//oneTwo: Given a string, compute a new string by moving the first char to come after the next two chars, so "abc" yields "bca". Repeat this process for each subsequent group of 3 chars, so "abcdef" yields "bcaefd". Ignore any group of fewer than 3 chars at the end.
func oneTwo(str: String) -> String {
    var result = ""
    var index = 0
    
    var index1 = str.index(str.startIndex, offsetBy: 0)
    var index2 = str.index(str.startIndex, offsetBy: 0)
    var index3 = str.index(str.startIndex, offsetBy: 0)
    
    while index < str.characters.count {
        index1 = str.index(str.startIndex, offsetBy: index)
        index2 = str.index(str.startIndex, offsetBy: index+1)
        index3 = str.index(str.startIndex, offsetBy: index+2)
        
        result = result + String(str[index2]) + String(str[index3]) + String(str[index1])
        index += 3
    }
    
    return result
}

//oneTwo(str: "abc") //bca
//oneTwo(str: "tca") //cat
//oneTwo(str: "tcagdo") //catdog

//zipZap: Look for patterns like "zip" and "zap" in the string -- length-3, starting with 'z' and ending with 'p'. Return a string where for all such words, the middle letter is gone, so "zipXzap" yields "zpXzp".
func zipZap(str: String) -> String {
    var result = ""
    var index = 0
    
    var indexZ = str.index(str.startIndex, offsetBy: 0)
    var indexP = str.index(str.startIndex, offsetBy: 0)
    
    while index < str.characters.count-2 {
        indexZ = str.index(str.startIndex, offsetBy: index)
        indexP = str.index(str.startIndex, offsetBy: index+2)
        
        if str[indexZ] == "z" && str[indexP] == "p" {
            result += "zp"
            index += 2
        } else {
            result += String(str[indexZ])
        }
        index += 1
    }
    
    return result
}

//(zipZap(str: "zipXzap") //zpXzp
//(zipZap(str: "zopzop") //zpzp
//(zipZap(str: "zzzopzop") //zzzpzp

//starOut: Return a version of the given string, where for every star (*) in the string the star and the chars immediately to its left and right are gone. So "ab*cd" yields "ad" and "ab**cd" also yields "ad".
func starOut(str: String) -> String {
    var result = ""
    var strIndex = str.index(str.startIndex, offsetBy: 0)
    var index = 0
    
    while index < str.characters.count {
        
        if index < str.characters.count - 1 && str[str.index(str.startIndex, offsetBy: index+1)] == "*" {
            index += 3
        } else if index > 0 && str[str.index(str.startIndex, offsetBy: index-1)] == "*" {
            index += 1
        } else {
            strIndex = str.index(str.startIndex, offsetBy: index)
            result += String(str[strIndex])
            index += 1
        }
    }
    
    return result
}

//starOut(str: "ab*cd") //ad
//starOut(str: "ab*cd") //ad
//starOut(str: "sm*eilly") //silly
