//scoresIncreasing: Given an array of scores, return true if each score is equal or greater than the one before. The array will be length 2 or more.
func scoresIncreasing(scores: [Int]) -> Bool {
    for num in 1..<scores.count {
        if scores[num] < scores[num-1] {
            return false
        }
    }
    
    return true
}

//scoresIncreasing(scores: [1, 3, 4])
//scoresIncreasing(scores: [1, 3, 2])
//scoresIncreasing(scores: [1, 1, 4])

//scores100: Given an array of scores, return true if there are scores of 100 next to each other in the array. The array length will be at least 2.
func scores100(scores: [Int]) -> Bool {
    
    for num in 0..<scores.count-1 {
        if scores[num] == 100 && scores[num+1] == 100 {
            return true
        }
    }
    
    return false
}

//scores100(scores: [1, 100, 100]) //true
//scores100(scores: [1, 100, 99, 100]) //false
//scores100(scores: [100, 1, 100, 100]) //true

//scoresClump: Given an array of scores sorted in increasing order, return true if the array contains 3 adjacent scores that differ from each other by at most 2, such as with {3, 4, 5} or {3, 5, 5}.
func scoresClump(scores: [Int]) -> Bool {
    
    for index in 0..<scores.count-2 {
        if abs(scores[index] - scores[index+1]) <= 2 && abs(scores[index] - scores[index+2]) <= 2 {
            return true
        }
    }
    
    return false
}

//scoresClump(scores: [3, 4, 5]) //true
//scoresClump(scores: [3, 4, 6]) //false
//scoresClump(scores: [1, 3, 5, 5]) //true

//scoresAverage: Given an array of scores, compute the int average of the first half and the second half, and return whichever is larger. We'll say that the second half begins at index length/2. The array length will be at least 2.
func scoresAverage(scores: [Int]) -> Int {
    
    let firstAverage = average(scores: scores, start: 0, end: scores.count / 2)
    let secondAverage = average(scores: scores, start: scores.count / 2, end: scores.count)
    
    return max(firstAverage, secondAverage)
    
}

func average(scores: [Int], start: Int, end: Int) -> Int {
    var sum = 0
    
    for index in start..<end {
        sum += scores[index]
    }
    
    return sum / (end - start)
}

//scoresAverage(scores: [2, 2, 4, 4]) //4
//scoresAverage(scores: [4, 4, 4, 2, 2, 2]) //4
//scoresAverage(scores: [3, 4, 5, 1, 2, 3] //4
