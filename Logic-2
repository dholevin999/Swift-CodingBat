//makeBricks: We want to make a row of bricks that is goal inches long. We have a number of small bricks (1 inch each) and big bricks (5 inches each). Return true if it is possible to make the goal by choosing from the given bricks. This is a little harder than it looks and can be done without any loops.
func makeBricks(small: Int, big: Int, goal: Int) -> Bool {
    
    if goal > big * 5 + small {
        return false
    }
    
    if goal % 5 > small {
        return false
    }
    
    return true
}

//makeBricks(small: 3, big: 1, goal: 8) //true
//makeBricks(small: 3, big: 1, goal: 9) //false
//makeBricks(small: 3, big: 2, goal: 10) //true

//loneSum: Given 3 int values, a b c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.
func loneSum(a: Int, b: Int, c: Int) -> Int {
    
    if a == b {
        if a == c {
            return 0
        }
        return c
    }
    
    if a == c {
        return b
    }
    
    if b == c {
        return a
    }
    
    return (a + b + c)
}

//loneSum(a: 1, b: 2, c: 3) //6
//loneSum(a: 3, b: 2, c: 3) //2
//loneSum(a: 3, b: 3, c: 3) //0

//luckySum: Given 3 int values, a b c, return their sum. However, if one of the values is 13 then it does not count towards the sum and values to its right do not count. So for example, if b is 13, then both b and c do not count.
func luckySum(a: Int, b: Int, c: Int) -> Int {
    var sum = 0
    
    if a != 13 {
        sum += a
        if b != 13 {
            sum += b
            if c != 13 {
                sum += c
            } else {
                return sum
            }
        } else {
            return sum
        }
    } else {
        return sum
    }
    
    return sum
}

//luckySum(a: 1, b: 2, c: 3) //6
//luckySum(a: 1, b: 2, c: 13) //3
//luckySum(a: 1, b: 13, c: 3) //1

//noTeenSum:Given 3 int values, a b c, return their sum. However, if any of the values is a teen -- in the range 13..19 inclusive -- then that value counts as 0, except 15 and 16 do not count as a teens.
func noTeenSum(a: Int, b: Int, c: Int) -> Int {
    return fixTeen(n: a) + fixTeen(n: b) + fixTeen(n: c)
}

func fixTeen(n: Int) -> Int {
    var result = 0
    
    if (n >= 13 && n <= 14) || (n >= 17 && n <= 19) {
        result = 0
    } else {
        result = n
    }
    
    return result
}

//noTeenSum(a: 1, b: 2, c: 3) //6
//noTeenSum(a: 2, b: 13, c: 1) //3
//noTeenSum(a: 2, b: 1, c: 14) //3

//roundSum:For this problem, we'll round an int value up to the next multiple of 10 if its rightmost digit is 5 or more, so 15 rounds up to 20. Alternately, round down to the previous multiple of 10 if its rightmost digit is less than 5, so 12 rounds down to 10. Given 3 ints, a b c, return the sum of their rounded values.
func roundSum(a: Int, b: Int, c: Int) -> Int {
    return round10(num: a) + round10(num: b) + round10(num: c)
}

func round10(num: Int) -> Int {
    let value = num % 10
    var result = num
    
    if value >= 5 {
        result += (10 - value)
    } else {
        result -= value
    }
    
    return result
}

//roundSum(a: 16, b: 17, c: 18) //60
//roundSum(a: 12, b: 13, c: 14) //30
//roundSum(a: 6, b: 4, c: 4) //10

//closeFar: Given three ints, a b c, return true if one of b or c is "close" (differing from a by at most 1), while the other is "far", differing from both other values by 2 or more.
func closeFar(a: Int, b: Int, c: Int) -> Bool {
    if (abs(b-a) <= 1 && abs(c-a) >= 2 && abs(c-b) >= 2) || abs(c-a) <= 1 && abs(b-a) >= 2 && abs(c-b) >= 2 {
        return true
    }
    
    return false
}

//closeFar(a: 1, b: 2, c: 10) //true
//closeFar(a: 1, b: 2, c: 3) //false
//closeFar(a: 4, b: 1, c: 3) //true

//blackJack: Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.
func blackJack(a: Int, b: Int) -> Int {
    if a > b && a <= 21 {
        return a
    } else if a < b && b <= 21{
        return b
    } else if a > 21 && b > 21{
        return 0
    } else {
        return a
    }
}

//blackJack(a: 19, b: 21) //21
//blackJack(a: 21, b: 19) //21
//blackJack(a: 19, b: 22) //19

//evenlySpaced: Given three ints, a b c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.
func evenlySpaced(a: Int, b: Int, c: Int) -> Bool {
    var maxVal = max(a, b)
    maxVal = max(maxVal, c)
    
    var minVal = min(a,b)
    minVal = min(minVal, c)
    
    if a != maxVal && a != minVal {
        if maxVal - a == a - minVal {
            return true
        }
    } else if b != maxVal && b != minVal {
        if maxVal - b == b - minVal {
            return true
        }
    } else if c != maxVal && c != minVal {
        if maxVal - c == c - minVal {
            return true
        }
    }
    
    return false
}

//evenlySpaced(a: 2, b: 4, c: 6) //true
//evenlySpaced(a: 4, b: 6, c: 2) //true
//evenlySpaced(a: 4, b: 6, c: 3) //false
