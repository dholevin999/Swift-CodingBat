//doubleChar: Given a string, return a string where for every char in the original, there are two chars.
func doubleChar(str: String) -> String {
    var index = str.index(str.startIndex, offsetBy: 0)
    var result = ""
    
    for x in 0..<str.characters.count {
        index = str.index(str.startIndex, offsetBy: x)
        result += "\(str[index])"
        result += "\(str[index])"
    }
    
    return result
}

//doubleChar(str: "The") //TThhee
//doubleChar(str: "AAbb") //AAAAbbbb
//doubleChar(str: "Hi-There") //HHii--TThheerree

//countHi: Return the number of times that the string "hi" appears anywhere in the given string.
func countHi(str: String) -> Int {
    var count = 0
    var startIndex = str.index(str.startIndex, offsetBy: 0)
    var endIndex = str.index(str.startIndex, offsetBy: 1)
    var range = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))

    for x in 0..<str.characters.count-1 {
        startIndex = str.index(str.startIndex, offsetBy: x)
        endIndex = str.index(str.startIndex, offsetBy: x+2)
        range = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))
        
        if str.substring(with: range) == "hi" {
            count += 1
        }
    }
    
    return count
}

//countHi(str: "abc hi ho") //1
//countHi(str: "ABChi hi") //2
//countHi(str: "hihi") //2

//catDog: Return true if the string "cat" and "dog" appear the same number of times in the given string.
func catDog(str: String) -> Bool {
    var catCount = 0
    var dogCount = 0
    var startIndex = str.index(str.startIndex, offsetBy: 0)
    var endIndex = str.index(str.startIndex, offsetBy: 1)
    var range = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))
    
    for index in 0..<str.characters.count-2 {
        startIndex = str.index(str.startIndex, offsetBy: index)
        endIndex = str.index(str.startIndex, offsetBy: index+3)
        range = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))
                
        if str.substring(with: range) == "cat" {
            catCount += 1
        } else if str.substring(with: range) == "dog" {
            dogCount += 1
        }
    }
    
    
    return catCount == dogCount
}

//catDog(str: "catdog") //true
//catDog(str: "catcat") //false
//catDog(str: "1cat1cadodog") //true

//countCode: Return the number of times that the string "code" appears anywhere in the given string, except we'll accept any letter for the 'd', so "cope" and "cooe" count.
func countCode(str: String) -> Int {
    var count = 0
    var startIndex = str.index(str.startIndex, offsetBy: 0)
    var endIndex = str.index(str.startIndex, offsetBy: 1)
    var range = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))
    
    var eIndexStart = str.index(str.startIndex, offsetBy: 0)
    var eIndexEnd = str.index(str.startIndex, offsetBy: 1)
    var eRange = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))
    
    for index in 0..<str.characters.count-3 {
        startIndex = str.index(str.startIndex, offsetBy: index)
        endIndex = str.index(str.startIndex, offsetBy: index+2)
        range = Range(uncheckedBounds: (lower: startIndex, upper: endIndex))
        
        eIndexStart = str.index(str.startIndex, offsetBy: index+3)
        eIndexEnd = str.index(str.startIndex, offsetBy: index+4)
        eRange = Range(uncheckedBounds: (lower: eIndexStart, upper: eIndexEnd))
        
        if str.substring(with: range) == "co" && str.substring(with: eRange) == "e" {
            count += 1
        }
    }
    
    return count
}

//countCode(str: "aaacodebbb") //1
//countCode(str: "codexxcode") //2
//countCode(str: "cozexxcope") //2

//endOther: Given two strings, return true if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be "case sensitive"). Note: str.toLowerCase() returns the lowercase version of a string.
func endOther(a: String, b: String) -> Bool {
    let aLower = a.lowercased()
    let bLower = b.lowercased()
    var startIndex = a.index(a.startIndex, offsetBy: 0)
    
    if a.characters.count < b.characters.count {
        startIndex = a.index(a.startIndex, offsetBy: a.characters.count)
        if aLower == bLower.substring(from: startIndex) {
            return true
        }
    } else {
        startIndex = b.index(b.startIndex, offsetBy: b.characters.count-1)
        if bLower == aLower.substring(from: startIndex) {
            return true
        }
    }
    
    return false
}

//endOther(a: "Hiabc", b: "abc") //true
//endOther(a: "AbC", b: "HiaBc") //true
//endOther(a: "abc", b: "abXabc") //true
