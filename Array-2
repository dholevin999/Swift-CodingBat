//countEvens: Return the number of even ints in the given array. Note: the % "mod" operator computes the remainder, e.g. 5 % 2 is 1.
func countEvens(nums: [Int]) -> Int {
    var count = 0
    
    for x in 0..<nums.count {
        if nums[x] % 2 == 0 {
            count += 1
        }
    }
    
    return count
}

//countEvens(nums: [2, 1, 2, 3, 4]) //3
//countEvens(nums: [2, 2, 0]) //3
//countEvens(nums: [1, 3, 5]) //0

//bigDiff: Given an array length 1 or more of ints, return the difference between the largest and smallest values in the array. Note: the built-in Math.min(v1, v2) and Math.max(v1, v2) methods return the smaller or larger of two values.
func bigDiff(nums: [Int]) -> Int {
    var minNum = nums[0]
    var maxNum = nums[0]
    
    for x in 0..<nums.count {
        minNum = min(nums[x], minNum)
        maxNum = max(nums[x], maxNum)
    }
    
    
    return maxNum - minNum
}

//bigDiff(nums: [10, 3, 5, 6]) //7
//bigDiff(nums: [7, 2, 10, 9]) //8
//bigDiff(nums: [2, 10, 7, 2]) //8

//centeredAverage: Return the "centered" average of an array of ints, which we'll say is the mean average of the values, except ignoring the largest and smallest values in the array. If there are multiple copies of the smallest value, ignore just one copy, and likewise for the largest value. Use int division to produce the final average. You may assume that the array is length 3 or more.
func centeredAverage(nums: [Int]) -> Int {
    var minNum = nums[0]
    var maxNum = nums[0]
    var sum = 0
    
    for x in 0..<nums.count {
        minNum = min(nums[x], minNum)
        maxNum = max(nums[x], maxNum)
        sum += nums[x]
    }
    
    return (sum - minNum - maxNum) / (nums.count-2)
}

//centeredAverage(nums: [1, 2, 3, 4, 100]) //3
//centeredAverage(nums: [1, 1, 5, 5, 10, 8, 7]) //5
//centeredAverage(nums: [-10, -4, -2, -4, -2, 0]) //-3

//sum13: Return the sum of the numbers in the array, returning 0 for an empty array. Except the number 13 is very unlucky, so it does not count and numbers that come immediately after a 13 also do not count.
func sum13(nums: [Int]) -> Int {
    var sum = 0
    
    for x in 0..<nums.count {
        if nums[x] != 13 {
            sum += nums[x]
        }
    }
    
    return sum
}

//print(sum13(nums: [1, 2, 2, 1])) //6
//print(sum13(nums: [1, 1])) //2
//print(sum13(nums: [1, 2, 2, 1, 13])) //6

//sum67: Return the sum of the numbers in the array, except ignore sections of numbers starting with a 6 and extending to the next 7 (every 6 will be followed by at least one 7). Return 0 for no numbers.
func sum67(nums: [Int]) -> Int {
    var sum = 0
    var range = false
    
    for x in 0..<nums.count {
        
        if !range {
            sum += nums[x]
        }
        
        if nums[x] == 6 {
            range = true
            sum -= 6
        } else if nums[x] == 7 {
            range = false
        }
    }
    
    return sum
}

//has22: Given an array of ints, return true if the array contains a 2 next to a 2 somewhere.
func has22(nums: [Int]) -> Bool {
    for x in 0..<nums.count-1 {
        if nums[x] == 2 && nums[x+1] == 2{
            return true
        }
    }
    return false
}

//has22(nums: [1, 2, 2]) //true
//has22(nums: [1, 2, 1, 2]) //false
//has22(nums: [2, 1, 2]) //false

//more14: Given an array of ints, return true if the number of 1's is greater than the number of 4's
func more14(nums: [Int]) -> Bool {
    var oneCount = 0
    var fourCount = 0
    
    for x in 0..<nums.count {
        if nums[x] == 1 {
            oneCount += 1
        } else if nums[x] == 4 {
            fourCount += 1
        }
    }
    
    return oneCount > fourCount
}

//more14(nums: [1, 4, 1]) //true
//more14(nums: [1, 4, 1, 4]) //false
//more14(nums: [1, 1]) //true

//fizzArray:Given a number n, create and return a new int array of length n, containing the numbers 0, 1, 2, ... n-1. The given n may be 0, in which case just return a length 0 array. You do not need a separate if-statement for the length-0 case; the for-loop should naturally execute 0 times in that case, so it just works. The syntax to make a new int array is: new int[desired_length]
func fizzArray(n: Int) -> [Int] {
    var array = [Int]()
    
    for x in 0..<n {
        array.append(x)
    }
    
    return array
}

//fizzArray(n: 4) //[0, 1, 2, 3]
//fizzArray(n: 1) //[0]
//fizzArray(n: 10) //[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

//only14: Given an array of ints, return true if every element is a 1 or a 4.
func only14(nums: [Int]) -> Bool {
    for x in 0..<nums.count {
        if nums[x] != 1 && nums[x] != 4 {
            return false
        }
    }
    return true
}

//only14(nums: [1, 4, 1, 4]) //true
//only14(nums: [1, 4, 2, 4]) //false
//only14(nums: [1, 1]) //true

//fizzArray2: Given a number n, create and return a new string array of length n, containing the strings "0", "1" "2" .. through n-1. N may be 0, in which case just return a length 0 array. Note: String.valueOf(xxx) will make the String form of most types. The syntax to make a new string array is: new String[desired_length]
func fizzArray2(n: Int) -> [String] {
    var array = [String]()
    
    for x in 0..<n {
        array.append(String(x))
    }
    
    return array
}

//fizzArray2(n: 4) //["0", "1", "2", "3"]
//fizzArray2(n: 10) //["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
//fizzArray2(n: 2) //["0", "1"]

//no14: Given an array of ints, return true if it contains no 1's or it contains no 4's.
func no14(nums: [Int]) -> Bool {
    var oneCount = 0
    var fourCount = 0
    
    for num in nums {
        if num == 1 {
            oneCount += 1
        } else if num == 4 {
            fourCount += 1
        }
    }
    return oneCount == 0 || fourCount == 0
}

//no14(nums: [1, 2, 3]) //true
//no14(nums: [1, 2, 3, 4]) //false
//no14(nums: [2, 3, 4]) //true

//isEverywhere: We'll say that a value is "everywhere" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.
func isEverywhere(nums: [Int], val: Int) -> Bool {
    for x in 0..<nums.count-1 {
        if nums[x] != val && nums[x+1] != val {
            return false
        }
    }
    
    return true
}

//isEverywhere(nums: [1, 2, 1, 3], val: 1) //true
//isEverywhere(nums: [1, 2, 1, 3], val: 2) //false
//isEverywhere(nums: [1, 2, 1, 3, 4], val: 1) //false

//either24: Given an array of ints, return true if the array contains a 2 next to a 2 or a 4 next to a 4, but not both.
func either24(nums: [Int]) -> Bool{
    var twoTwo = false
    var fourFour = false
    
    for x in 0..<nums.count-1 {
        if nums[x] == 2 && nums[x+1] == 2 {
            twoTwo = true
        } else if nums[x] == 4 && nums[x+1] == 4 {
            fourFour = true
        }
    }
    
    return (twoTwo && !fourFour) || (!twoTwo && fourFour)
}

//print(either24(nums: [1, 2, 2])) //true
//print(either24(nums: [4, 4, 1])) //true
//print(either24(nums: [4, 4, 1, 2, 2])) //true

//matchUp: Given arrays nums1 and nums2 of the same length, for every element in nums1, consider the corresponding element in nums2 (at the same index). Return the count of the number of times that the two elements differ by 2 or less, but are not equal.
func matchUp(nums1: [Int], nums2: [Int]) -> Int {
    var count = 0
    
    for x in 0..<nums1.count {
        if abs(nums1[x] - nums2[x]) <= 2 {
            count += 1
        }
    }
    
    return count
}

//matchUp(nums1: [1, 2, 3], nums2: [2, 3, 10]) //false
//matchUp(nums1: [1, 2, 3], nums2: [2, 3, 5]) //true
//matchUp(nums1: [1, 2, 3], nums2: [2, 3, 3]) //true

//has77: Given an array of ints, return true if the array contains two 7's next to each other, or there are two 7's separated by one element, such as with {7, 1, 7}.
func has77(nums: [Int]) -> Bool {
    for x in 0..<nums.count-2 {
        if (nums[x] == 7 && nums[x+1] == 7) || (nums[x] == 7 && nums[x+2] == 7) {
            return true
        }
    }
    
    return false
}

//has77(nums: [1, 7, 7]) //true
//has77(nums: [1, 7, 1, 7]) //true
//has77(nums: [1, 7, 1, 1, 7]) //false

//has12: Given an array of ints, return true if there is a 1 in the array with a 2 somewhere later in the array.
func has12(nums: [Int]) -> Bool {
    for num in nums {
        if num == 1 {
            for num in nums {
                if num == 2 {
                    return true
                }
            }
        }
    }
    return false
}

//has12(nums: [1, 3, 2]) // true
//has12(nums: [3, 1, 2]) //true
//has12(nums: [3, 1, 4, 5, 2]) //true

//modeThree: Given an array of ints, return true if the array contains either 3 even or 3 odd values all next to each other.
func modThree(nums: [Int]) -> Bool {
    for x in 0..<nums.count-2 {
        if (nums[x] % 2 == 0 && nums[x+1] % 2 == 0 && nums[x+2] % 2 == 0) || (nums[x] % 2 == 1 && nums[x+1] % 2 == 1 && nums[x+2] % 2 == 1) {
            return true
        }
    }
    return false
}

//modThree(nums: [2, 1, 3, 5]) //true
//modThree(nums: [2, 1, 2, 5]) //false
//modThree(nums: [2, 4, 2, 5]) //true

//haveThree: Given an array of ints, return true if the value 3 appears in the array exactly 3 times, and no 3's are next to each other.
func haveThree(nums: [Int]) -> Bool {
    var count = 0
    
    for num in nums {
        if num == 3 {
            count += 1
        }
    }
    
    for x in 0..<nums.count-1 {
        if nums[x] == 3 && nums[x+1] == 3 {
            return false
        }
    }
    
    return count == 3
}

//haveThree(nums: [3, 1, 3, 1, 3]) //true
//haveThree(nums: [3, 1, 3, 3]) //false
//haveThree(nums: [3, 4, 3, 3, 4]) //false

//twotwo: Given an array of ints, return true if every 2 that appears in the array is next to another 2.
func twotwo(nums: [Int]) -> Bool {
    var x = 0
    while x < nums.count-1 {
        if nums[x] == 2 && nums[x+1] != 2 {
            return false
        } else if nums[x] == 2 && nums[x+1] == 2 {
            x += 1
        }
        x += 1
    }
    
    if nums[nums.count-1] == 2 {
        return false
    }
    
    return true
}

//twotwo(nums: [4, 2, 2, 3])) //true
//twotwo(nums: [2, 2, 4])) //true
//twotwo(nums: [2, 2, 4, 2])) //false

//sameEnds: Return true if the group of N numbers at the start and end of the array are the same. For example, with {5, 6, 45, 99, 13, 5, 6}, the ends are the same for n=0 and n=2, and false for n=1 and n=3. You may assume that n is in the range 0..nums.length inclusive.
func sameEnds(nums: [Int], len: Int) -> Bool {
    var length = len
    var start = 0
    var end = nums.count - len
    
    while length > 0 {
        if nums[start] != nums[end] {
            return false
        } else {
            start += 1
            end += 1
        }
        
        length -= 1
    }
    
    return true
}

//sameEnds(nums: [5, 6, 45, 99, 13, 5, 6], len: 1)) //false
//sameEnds(nums: [5, 6, 45, 99, 13, 5, 6], len: 2)) //true
//sameEnds(nums: [5, 6, 45, 99, 13, 5, 6], len: 3)) //false

//tripleUp: Return true if the array contains, somewhere, three increasing adjacent numbers like .... 4, 5, 6, ... or 23, 24, 25.
func tripleUp(nums: [Int]) -> Bool {
    for x in 0..<nums.count-2 {
        if nums[x] == nums[x+1] - 1 && nums[x+1] == nums[x+2] - 1 {
            return true
        }
    }
    
    return false
}

//tripleUp(nums: [1, 4, 5, 6, 2]) //true
//tripleUp(nums: [1, 2, 3]) //true
//tripleUp(nums: [1, 2, 4]) //false

//fizzArray3:Given start and end numbers, return a new array containing the sequence of integers from start up to but not including end, so start=5 and end=10 yields {5, 6, 7, 8, 9}. The end number will be greater or equal to the start number. Note that a length-0 array is valid
func fizzArray3(start: Int, end: Int) -> [Int] {
    var array = [Int]()
    
    for x in start..<end {
        array.append(x)
    }
    
    return array
}

//fizzArray3(start: 5, end: 10) //[5, 6, 7, 8, 9]
//fizzArray3(start: 11, end: 18) //[11, 12, 13, 14, 15, 16, 17]
//fizzArray3(start: 1, end: 3) //[1, 2]
