//scoresIncreasing: Given an array of scores, return true if each score is equal or greater than the one before. The array will be length 2 or more.
func scoresIncreasing(scores: [Int]) -> Bool {
    for num in 1..<scores.count {
        if scores[num] < scores[num-1] {
            return false
        }
    }
    
    return true
}

//scoresIncreasing(scores: [1, 3, 4])
//scoresIncreasing(scores: [1, 3, 2])
//scoresIncreasing(scores: [1, 1, 4])

//scores100: Given an array of scores, return true if there are scores of 100 next to each other in the array. The array length will be at least 2.
func scores100(scores: [Int]) -> Bool {
    
    for num in 0..<scores.count-1 {
        if scores[num] == 100 && scores[num+1] == 100 {
            return true
        }
    }
    
    return false
}

//scores100(scores: [1, 100, 100]) //true
//scores100(scores: [1, 100, 99, 100]) //false
//scores100(scores: [100, 1, 100, 100]) //true

//scoresClump: Given an array of scores sorted in increasing order, return true if the array contains 3 adjacent scores that differ from each other by at most 2, such as with {3, 4, 5} or {3, 5, 5}.
func scoresClump(scores: [Int]) -> Bool {
    
    for index in 0..<scores.count-2 {
        if abs(scores[index] - scores[index+1]) <= 2 && abs(scores[index] - scores[index+2]) <= 2 {
            return true
        }
    }
    
    return false
}

//scoresClump(scores: [3, 4, 5]) //true
//scoresClump(scores: [3, 4, 6]) //false
//scoresClump(scores: [1, 3, 5, 5]) //true

//scoresAverage: Given an array of scores, compute the int average of the first half and the second half, and return whichever is larger. We'll say that the second half begins at index length/2. The array length will be at least 2.
func scoresAverage(scores: [Int]) -> Int {
    
    let firstAverage = average(scores: scores, start: 0, end: scores.count / 2)
    let secondAverage = average(scores: scores, start: scores.count / 2, end: scores.count)
    
    return max(firstAverage, secondAverage)
    
}

func average(scores: [Int], start: Int, end: Int) -> Int {
    var sum = 0
    
    for index in start..<end {
        sum += scores[index]
    }
    
    return sum / (end - start)
}

//scoresAverage(scores: [2, 2, 4, 4]) //4
//scoresAverage(scores: [4, 4, 4, 2, 2, 2]) //4
//scoresAverage(scores: [3, 4, 5, 1, 2, 3] //4

//wordsCount: Given an array of strings, return the count of the number of strings with the given length.
func wordsCount(words: [String], len: Int) -> Int {
    var count = 0
    
    for word in words {
        if word.characters.count == len {
            count += 1
        }
    }
    return count
}

//wordsCount(words: ["a", "bb", "b", "ccc"], len: 1) //2
//wordsCount(words: ["a", "bb", "b", "ccc"], len: 3) //1
//wordsCount(words: ["a", "bb", "b", "ccc"], len: 4) //0

//wordsFront: Given an array of strings, return a new array containing the first N strings. N will be in the range 1..length.
func wordsFront(words: [String], n: Int) -> [String] {
    var result = [String]()
    
    for index in 0..<n {
        result.append(words[index])
    }
    
    return result
}

//wordsFront(words: ["a", "b", "c", "d"], n: 1) //["a"]
//wordsFront(words: ["a", "b", "c", "d"], n: 2) //["a", "b"]
//wordsFront(words: ["a", "b", "c", "d"], n: 3) //["a", "b", "c"]

//wordsWithoutList: Given an array of strings, return a new List (e.g. an ArrayList) where all the strings of the given length are omitted. See wordsWithout() below which is more difficult because it uses arrays.
func wordsWithoutList(words: [String], len: Int) -> [String] {
    var result = [String]()
    
    for word in words {
        if word.characters.count != len {
            result.append(word)
        }
    }
    
    return result
}

//wordsWithoutList(words: ["a", "bb", "b", "ccc"], len: 1) //["bb", "ccc"]
//wordsWithoutList(words: ["a", "bb", "b", "ccc"], len: 3) //["a", "bb", "b",]
//wordsWithoutList(words: ["a", "bb", "b", "ccc"], len: 4) //["a", "bb", "b", "ccc"]

//hasOne: Given a positive int n, return true if it contains a 1 digit. Note: use % to get the rightmost digit, and / to discard the rightmost digit.
func hasOne(n: Int) -> Bool {
    var num = n
    
    while num > 0 {
        if num % 10 == 1 {
            return true
        } else {
            num = num / 10
        }
    }
    
    return false
}

//hasOne(n: 10)) //true
//hasOne(n: 22)) //false
//hasOne(n: 220)) //false

//dividesSelf: We'll say that a positive int divides itself if every digit in the number divides into the number evenly. So for example 128 divides itself since 1, 2, and 8 all divide into 128 evenly. We'll say that 0 does not divide into anything evenly, so no number with a 0 digit divides itself. Note: use % to get the rightmost digit, and / to discard the rightmost digit.
func dividesSelf(n: Int) -> Bool {
    var num = n
    let numCopy = num
    
    while num > 0 {
        if num % 10 == 0 {
            return false
        } else {
            if numCopy % (n % 10) == 0 {
                num = num / 10
            } else {
                return false
            }
        }
    }
    
    return true
}

//dividesSelf(n: 128) //true
//dividesSelf(n: 12) //true
//dividesSelf(n: 120) //false

//copyEvens: Given an array of positive ints, return a new array of length "count" containing the first even numbers from the original array. The original array will contain at least "count" even numbers.
func copyEvens(nums: [Int], count: Int) -> [Int] {
    var result = [Int]()
    
    for num in nums {
        if result.count < count && num % 2 == 0 {
            result.append(num)
        }
    }
    
    
    return result
}

//copyEvens(nums: [3, 2, 4, 5, 8], count: 2) //[2, 4]
//copyEvens(nums: [3, 2, 4, 5, 8], count: 3) //[2, 4, 8]
//copyEvens(nums: [6, 1, 2, 4, 5, 8], count: 3) //[6, 2, 4]

//copyEndy: We'll say that a positive int n is "endy" if it is in the range 0..10 or 90..100 (inclusive). Given an array of positive ints, return a new array of length "count" containing the first endy numbers from the original array. Decompose out a separate isEndy(int n) method to test if a number is endy. The original array will contain at least "count" endy numbers.
func copyEndy(nums: [Int], count: Int) -> [Int] {
    var result = [Int]()
    
    for num in nums {
        if result.count < count && isEndy(n: num) == true {
            result.append(num)
        }
    }
    
    return result
}

func isEndy(n: Int) -> Bool {
    if (n >= 0 && n <= 10) || (n >= 90 && n <= 100) {
        return true
    }
    
    return false
}

//copyEndy(nums: [9, 11, 90, 22, 6], count: 2) //[9, 90]
//copyEndy(nums: [9, 11, 90, 22, 6], count: 3) //[9, 90, 6]
//copyEndy(nums: [12, 1, 1, 13, 0, 20], count: 2) //[1, 1]

//matchUp: Given 2 arrays that are the same length containing strings, compare the 1st string in one array to the 1st string in the other array, the 2nd to the 2nd and so on. Count the number of times that the 2 strings are non-empty and start with the same char. The strings may be any length, including 0.
func matchUp(a: [String], b: [String]) -> Int {
    var count = 0
    
        var indexA = a[0].index(a[0].startIndex, offsetBy: 0)
        var indexB = b[0].index(b[0].startIndex, offsetBy: 0)
    
    
    for index in 0..<a.count {
        
        if a[index].characters.count > 0 && b[index].characters.count > 0 {
            indexA = a[index].index(a[index].startIndex, offsetBy: 0)
            indexB = b[index].index(b[index].startIndex, offsetBy: 0)
            
            if a[index][indexA] == b[index][indexB] {
                count += 1
            }
        }
        
    }

    return count
}

//matchUp(a: ["aa", "bb", "cc"], b: ["aaa", "xx", "bb"]) //1
//matchUp(a: ["aa", "bb", "cc"], b: ["aaa", "b", "bb"]) //2
//matchUp(a: ["aa", "bb", "cc"], b: ["", "", "ccc"]) //1

//scoreUp: The "key" array is an array containing the correct answers to an exam, like {"a", "a", "b", "b"}. the "answers" array contains a student's answers, with "?" representing a question left blank. The two arrays are not empty and are the same length. Return the score for this array of answers, giving +4 for each correct answer, -1 for each incorrect answer, and +0 for each blank answer.
func scoreUp(key: [String], answers: [String]) -> Int {
    var score = 0
    
    for index in 0..<key.count {
        if key[index] == answers[index] {
            score += 4
        } else if answers[index] == "?" {
            score += 0
        } else {
            score -= 1
        }
    }
    
    return score
}

//scoreUp(key: ["a", "a", "b", "b"], answers: ["a", "c", "b", "c"]) //6
//scoreUp(key: ["a", "a", "b", "b"], answers: ["a", "a", "b", "c"]) //11
//scoreUp(key: ["a", "a", "b", "b"], answers: ["a", "a", "b", "b"]) //16

//wordsWithout: Given an array of strings, return a new array without the strings that are equal to the target string. One approach is to count the occurrences of the target string, make a new array of the correct length, and then copy over the correct strings.
func wordsWithout(words: [String], target: String) -> [String] {
    var result = [String]()
    
    for word in words {
        if word != target {
            result.append(word)
        }
    }
    
    return result
}

//wordsWithout(words: ["a", "b", "c", "a"], target: "a") //["b", "c"]
//wordsWithout(words: ["a", "b", "c", "a"], target: "b") //["a", "c", "a"]
//wordsWithout(words: ["a", "b", "c", "a"], target: "c") //["a", "b", "a"]
