//factorial: Given n of 1 or more, return the factorial of n, which is n * (n-1) * (n-2) ... 1. Compute the result recursively (without loops).
func factorial(n: Int) -> Int {
    if n == 1 {
        return 1
    }
    return (n * factorial(n: (n-1)))
}

//factorial(n: 1) //1
//factorial(n: 2) //2
//factorial(n: 3) //6

//bunnyEars: We have a number of bunnies and each bunny has two big floppy ears. We want to compute the total number of ears across all the bunnies recursively (without loops or multiplication).
func bunnyEars(bunnies: Int) -> Int {
    
    if bunnies == 0 {
        return 0
    }
    
    return (2 + bunnyEars(bunnies: bunnies - 1))
}

//bunnyEars(bunnies: 0) //0
//bunnyEars(bunnies: 1) //2
//bunnyEars(bunnies: 2) //4

//fibanacci: The fibonacci sequence is a famous bit of mathematics, and it happens to have a recursive definition. The first two values in the sequence are 0 and 1 (essentially 2 base cases). Each subsequent value is the sum of the previous two values, so the whole sequence is: 0, 1, 1, 2, 3, 5, 8, 13, 21 and so on. Define a recursive fibonacci(n) method that returns the nth fibonacci number, with n=0 representing the start of the sequence.
func fibanacci(n: Int) -> Int {
    if n == 0 {
        return 0
    } else if n == 1 {
        return 1
    }
    
    return (fibanacci(n: n-1) + fibanacci(n: n-2))
}

//fibanacci(n: 0) //0
//fibanacci(n: 1) //1
//fibanacci(n: 2) //1

//bunnyEars2: We have bunnies standing in a line, numbered 1, 2, ... The odd bunnies (1, 3, ..) have the normal 2 ears. The even bunnies (2, 4, ..) we'll say have 3 ears, because they each have a raised foot. Recursively return the number of "ears" in the bunny line 1, 2, ... n (without loops or multiplication).
func bunnyEars2(bunnies: Int) -> Int {
    if bunnies == 0 {
        return 0
    }
    
    if bunnies % 2 == 0 {
        return (3 + bunnyEars2(bunnies: bunnies - 1))
    } else {
        return (2 + bunnyEars2(bunnies: bunnies - 1))
    }
}

//bunnyEars2(bunnies: 0) //0
//bunnyEars2(bunnies: 1) //2
//bunnyEars2(bunnies: 2) //5

//triangle: We have triangle made of blocks. The topmost row has 1 block, the next row down has 2 blocks, the next row has 3 blocks, and so on. Compute recursively (no loops or multiplication) the total number of blocks in such a triangle with the given number of rows.
func triangle(rows: Int) -> Int {
    if rows == 0 {
        return 0
    }
    
    return (rows + triangle(rows: rows - 1))
}

//triangle(rows: 0) //0
//triangle(rows: 1) //1
//triangle(rows: 2) //3

//sumDigits:Given a non-negative int n, return the sum of its digits recursively (no loops). Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12).
func sumDigits(n: Int) -> Int {
    
    if n == 0 {
        return 0
    }
    
    return (n % 10 + sumDigits(n: n / 10))
}

//sumDigits(n: 126) //9
//sumDigits(n: 49) //13
//sumDigits(n: 12) //3

//count7: Given a non-negative int n, return the count of the occurrences of 7 as a digit, so for example 717 yields 2. (no loops).
func count7(n: Int) -> Int {    
    if n == 0 {
        return 0
    }
    
    if n % 10 == 7 {
        return (1 + count7(n: n / 10))
    } else {
        return count7(n: n / 10)
    }
}

//count7(n: 717) //2
//count7(n: 7) //1
//count7(n: 123) //0

//count8:Given a non-negative int n, compute recursively (no loops) the count of the occurrences of 8 as a digit, except that an 8 with another 8 immediately to its left counts double, so 8818 yields 4.
func count8(n: Int) -> Int {
    if n == 0 {
        return 0
    }
    
    if n % 10 == 8 && (n / 10) % 10 == 8 {
        return (2 + count8(n: n / 10))
    } else if n % 10 == 8{
        return (1 + count8(n: n / 10))
    } else {
        return count8(n: n / 10)
    }
}

//count8(n: 8) //1
//count8(n: 818) //2
//count8(n: 8818) //4

//powerN: Given base and n that are both 1 or more, compute recursively (no loops) the value of base to the n power, so powerN(3, 2) is 9 (3 squared).
func powerN(base: Int, n: Int) -> Int {
    if n == 0 {
        return 1
    }
    
    return (base * powerN(base: base, n: n-1))
}

//powerN(base: 3, n: 1) //3
//powerN(base: 3, n: 2) //9
//powerN(base: 3, n: 3) //27
